{"jsonapi":{"version":"1.0"},"data":{"type":"project","id":"ember-rx","attributes":{"name":"ember-rx","version":"0.6.0","navigationIndex":[{"type":"helpers","items":[{"id":"ember-rx/helpers/subscribe","path":"helpers/subscribe","name":"{{subscribe}}"}]},{"type":"classes","items":[{"id":"ember-rx/route~ObservableModelRoute","path":"modules/ember-rx/route~ObservableModelRoute","name":"ObservableModelRoute"}]},{"type":"modules","items":[{"id":"ember-rx/decorators/subscribe","path":"modules/ember-rx/decorators/subscribe","name":"ember-rx/decorators/subscribe"},{"id":"ember-rx/observables/from-event","path":"modules/ember-rx/observables/from-event","name":"ember-rx/observables/from-event"},{"id":"ember-rx/observables/from-property-change","path":"modules/ember-rx/observables/from-property-change","name":"ember-rx/observables/from-property-change"},{"id":"ember-rx/test-support/setup-scheduler","path":"modules/ember-rx/test-support/setup-scheduler","name":"ember-rx/test-support/setup-scheduler"},{"id":"ember-rx/utils/first-to-promise","path":"modules/ember-rx/utils/first-to-promise","name":"ember-rx/utils/first-to-promise"}]}]},"relationships":{"modules":{"data":[{"type":"module","id":"ember-rx/decorators/subscribe"},{"type":"module","id":"ember-rx/helpers/subscribe"},{"type":"module","id":"ember-rx/observables/from-event"},{"type":"module","id":"ember-rx/observables/from-property-change"},{"type":"module","id":"ember-rx/route"},{"type":"module","id":"ember-rx/test-support/setup-scheduler"},{"type":"module","id":"ember-rx/utils/first-to-promise"}]}}},"included":[{"type":"module","id":"ember-rx/decorators/subscribe","attributes":{"file":"ember-rx/decorators/subscribe","functions":[{"name":"subscribe","description":"<div class=\"docs-md\"><p>This function can be applied as a decorator to a class.</p>\n<p>Somewhat like a Computed Property, it is passed the name of\nanother property -- a property that is an Observable. The propeperty\ndecorated will follow the most recent value emitted by the Observable.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjavascript\"><span class=\"hljs-keyword\">import</span> Component <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@ember/component\"</span>;\n<span class=\"hljs-keyword\">import</span> { subscribe } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"ember-rx\"</span>;\n<span class=\"hljs-keyword\">import</span> currentTimeObservable <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"wherever\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WithCurrentTime</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  currentTime$ = currentTimeObservable;\n\n  @subscribe(<span class=\"hljs-string\">'currentTime$'</span>) currentTime;\n}</code></pre>\n<p>If you provide an initializer for the property, that value will be used\nbefore a value is emitted.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjavascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DataLoader</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  data$ = someObservableThatMayTakeAWhile;\n\n  @subscribe(<span class=\"hljs-string\">'data$'</span>)\n  model = [];\n}</code></pre>\n<p>If the dependent observable is replaced, the original subscription will\nbe unsubscribed from and the new observable subscribed to automatically.</p>\n<p>Additionally, you can provide a function to the decorator that returns an\nObservable. In that case, the returned Observable will be the one that values\nare received from.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjavascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ShowLastTransition</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  @service router;\n\n  @subscribe(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =&gt;</span> fromEvent(i.router, <span class=\"hljs-string\">'routeWillChange'</span>))\n  lastTransition\n}</code></pre></div>","lineNumber":55,"access":"public","tags":[],"file":"ember-rx/decorators/subscribe","returns":null,"params":[{"nullable":null,"spread":false,"optional":false,"name":"observableKey","description":"","type":"string"}],"isAsync":false,"isGenerator":false,"exportType":"default"}],"variables":[]},"relationships":{"classes":{"data":[]},"components":{"data":[]}}},{"type":"class","id":"ember-rx/helpers/subscribe~SubscribeHelper","attributes":{"name":"SubscribeHelper","file":"ember-rx/helpers/subscribe","exportType":"default","description":"<div class=\"docs-md\"><p>Helper for subscribing to an <code>Observable</code> and emitting the latest value</p>\n<p>By passing an observable to the helper, the last value emitted will be\nreturned. As new values are emitted, the returned value will update\nautomatically.</p>\n<p><code>undefined</code> will be returned before a value is emitted.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedhbs\"><span class=\"xml\"></span><span class=\"hljs-template-tag\">{{#<span class=\"hljs-name\">let</span> (subscribe model) <span class=\"hljs-keyword\">as</span> |latestValue|}}</span><span class=\"xml\">\n  </span><span class=\"hljs-template-variable\">{{value}}</span><span class=\"xml\">\n</span><span class=\"hljs-template-tag\">{{/<span class=\"hljs-name\">let</span>}}</span><span class=\"xml\"></span></code></pre></div>","lineNumber":18,"access":"public","isInterface":false,"decorators":[],"tags":[],"fields":[],"methods":[],"accessors":[],"parentClassId":"ember-stream-helper~BaseStreamHelper"},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-rx/helpers/subscribe","attributes":{"file":"ember-rx/helpers/subscribe","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-rx/helpers/subscribe~SubscribeHelper"}]},"components":{"data":[]}}},{"type":"module","id":"ember-rx/observables/from-event","attributes":{"file":"ember-rx/observables/from-event","functions":[{"name":"fromEvent","description":"<div class=\"docs-md\"><p>Create an Observable from Ember events</p>\n<p>Listen to any event emitted through the <code>Evented</code> mixin, creating\nan Observable from their values.</p></div>","lineNumber":15,"access":"public","tags":[],"file":"ember-rx/observables/from-event","returns":{"type":"Observable","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"subject","description":"","type":"EmberObject"},{"nullable":null,"spread":false,"optional":false,"name":"eventName","description":"","type":"string"}],"isAsync":false,"isGenerator":false,"exportType":"default"}],"variables":[]},"relationships":{"classes":{"data":[]},"components":{"data":[]}}},{"type":"module","id":"ember-rx/observables/from-property-change","attributes":{"file":"ember-rx/observables/from-property-change","functions":[{"name":"fromPropertyChange","description":"<div class=\"docs-md\"><p>Create an Observable from the values of a property.</p>\n<p>Each time the property changes, the new value will be emitted from the\nObservable. This can be thought of as a replacement for manually using\n<code>addObserver</code> and <code>removeObserver</code> from Ember&#39;s API.</p></div>","lineNumber":17,"access":"public","tags":[],"file":"ember-rx/observables/from-property-change","returns":{"type":"Observable","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"subject","description":"","type":"EmberObject"},{"nullable":null,"spread":false,"optional":false,"name":"property","description":"","type":"string"}],"isAsync":false,"isGenerator":false,"exportType":"default"}],"variables":[]},"relationships":{"classes":{"data":[]},"components":{"data":[]}}},{"type":"class","id":"ember-rx/route~ObservableModelRoute","attributes":{"name":"ObservableModelRoute","file":"ember-rx/route","exportType":"default","description":"<div class=\"docs-md\"><p>Base class for routes that return an <code>Observable</code> from the <code>model</code> hook,\nrather than a <code>Promise</code>.</p>\n<p>The loading state for the route will be transitioned to until the Observable\nemits its first value, just as if you had returned a <code>Promise</code>.</p>\n<p>Each time a new value is emitted from the returned <code>Observable</code>, the <code>model</code>\nproperty on the corresponding controller will be replaced with that value.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjavascript\"><span class=\"hljs-keyword\">import</span> { Route } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"ember-rx\"</span>;\n<span class=\"hljs-keyword\">import</span> { inject <span class=\"hljs-keyword\">as</span> service } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@ember-decorators/service\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PostsRoute</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Route</span> </span>{\n  @service apollo;\n\n  model() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.apollo.watchQuery({ <span class=\"hljs-attr\">query</span>: ... });\n  }\n}</code></pre></div>","lineNumber":33,"access":"public","isInterface":false,"decorators":[],"tags":[],"fields":[],"methods":[],"accessors":[],"parentClassId":"@ember/routing/route~Route"},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-rx/route","attributes":{"file":"ember-rx/route","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-rx/route~ObservableModelRoute"}]},"components":{"data":[]}}},{"type":"module","id":"ember-rx/test-support/setup-scheduler","attributes":{"file":"ember-rx/test-support/setup-scheduler","functions":[{"name":"setupScheduler","description":"<div class=\"docs-md\"><p>Sets up an <a href=\"/docs/api/modules/ember-rx/test-support/utils/test-scheduler~ExtendedTestScheduler\"  class=\"docs-md__a\"><code>ExtendedTestScheduler</code></a>\ninstance on the test context to help create an observable that can be\ncontrolled remotely.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjavascript\"><span class=\"hljs-keyword\">import</span> { setupScheduler } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-rx/test-support'</span>;\n\n<span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'Some Module'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">hooks</span>) </span>{\n  setupScheduler(hooks);\n\n  test(<span class=\"hljs-string\">'Some Test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">assert</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> testObservable = <span class=\"hljs-keyword\">this</span>.scheduler.createColdObservable(<span class=\"hljs-string\">'--a--b|'</span>, {\n      <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>\n    });\n  });\n});</code></pre></div>","lineNumber":26,"access":"public","tags":[{"name":"returns","value":"{void}"}],"file":"ember-rx/test-support/setup-scheduler","returns":{"type":"void","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"hooks","description":"","type":"object"}],"isAsync":false,"isGenerator":false,"exportType":"default"}],"variables":[]},"relationships":{"classes":{"data":[]},"components":{"data":[]}}},{"type":"module","id":"ember-rx/utils/first-to-promise","attributes":{"file":"ember-rx/utils/first-to-promise","functions":[{"name":"firstToPromise","description":"<div class=\"docs-md\"><p>Converts an <code>Observable</code> into a <code>Promise</code> and an <code>Observable</code></p>\n<p>The <code>Promise</code> will resolve with the first value from the <code>Observable</code>. The\n<code>Observable</code> will emit all future values.</p></div>","lineNumber":13,"access":"public","tags":[],"file":"ember-rx/utils/first-to-promise","returns":{"type":"[Promise, Observable]","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"observable","description":"","type":"Observable"}],"isAsync":false,"isGenerator":false,"exportType":"default"}],"variables":[]},"relationships":{"classes":{"data":[]},"components":{"data":[]}}}]}
